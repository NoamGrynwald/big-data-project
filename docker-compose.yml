version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - fraud-detection
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - fraud-detection
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 10s
      timeout: 5s
      retries: 10

  spark-master:
    image: bitnami/spark:3.4
    hostname: spark-master
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    volumes:
      - ./scripts:/app/scripts
      - ./output:/app/output
    networks:
      - fraud-detection

  spark-worker:
    image: bitnami/spark:3.4
    hostname: spark-worker
    container_name: spark-worker
    ports:
      - "8081:8081"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    volumes:
      - ./scripts:/app/scripts
      - ./output:/app/output
    networks:
      - fraud-detection

  producer:
    build:
      context: .
      dockerfile: docker/Dockerfile.producer
    container_name: json-producer
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./data:/app/data
      - ./scripts:/app/scripts
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: creditcard-data
    command: ["bash", "/app/scripts/wait-for-kafka-and-spark.sh"]
    networks:
      - fraud-detection

  spark-fraud-app:
    build:
      context: .
      dockerfile: docker/Dockerfile.spark
    container_name: spark-fraud-app
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      spark-submit
      --master spark://spark-master:7077
      --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.0
      --driver-memory 1g
      --executor-memory 1g
      --conf spark.sql.streaming.forceDeleteTempCheckpointLocation=true
      --conf spark.serializer=org.apache.spark.serializer.KryoSerializer
      --conf spark.sql.adaptive.enabled=true
      /app/scripts/fraud_detection_spark.py
    volumes:
      - ./scripts:/app/scripts
      - ./output:/app/output
    networks:
      - fraud-detection

  fraud-consumer:
    build:
      context: .
      dockerfile: docker/Dockerfile.consumer
    container_name: fraud-consumer
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./scripts:/app/scripts
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: fraud-alerts
      KAFKA_GROUP_ID: fraud-consumer-group
    command: ["python", "scripts/consumer.py"]
    networks:
      - fraud-detection

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    hostname: elasticsearch
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - fraud-detection
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    hostname: kibana
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - fraud-detection

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  elasticsearch_data:

networks:
  fraud-detection:
    driver: bridge
